// Autogenerated from Pigeon (v9.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.gianlucaparadise.flutter_cast_framework;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PlatformBridgeApis {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaInfo */
  public enum StreamType {
    /** An invalid (unknown) stream type. */
    INVALID(0),
    /** A stream type of "none". */
    NONE(1),
    /** A buffered stream type. */
    BUFFERED(2),
    /** A live stream type. */
    LIVE(3);

    private final int index;

    private StreamType(final int index) {
      this.index = index;
    }
  }

  /** Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaMetadata */
  public enum MediaType {
    /** A media type representing generic media content. */
    GENERIC(0),
    /** A media type representing a movie. */
    MOVIE(1),
    /** A media type representing an TV show. */
    TV_SHOW(2),
    /** A media type representing a music track. */
    MUSIC_TRACK(3),
    /** A media type representing a photo. */
    PHOTO(4),
    /** A media type representing an audiobook chapter. */
    AUDIOBOOK_CHAPTER(5),
    /** The smallest media type value that can be assigned for application-defined media types. */
    USER(6);

    private final int index;

    private MediaType(final int index) {
      this.index = index;
    }
  }

  /** Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaMetadata */
  public enum MediaMetadataKey {
    /** String key: Album artist. */
    ALBUM_ARTIST(0),
    /** String key: Album title. */
    ALBUM_TITLE(1),
    /** String key: Artist. */
    ARTIST(2),
    /** String key: Audiobook title. */
    BOOK_TITLE(3),
    /** String key: Broadcast date. */
    BROADCAST_DATE(4),
    /** String key: Chapter number. */
    CHAPTER_NUMBER(5),
    /** String key: Chapter title. */
    CHAPTER_TITLE(6),
    /** String key: Composer. */
    COMPOSER(7),
    /** String key: Creation date. */
    CREATION_DATE(8),
    /** Integer key: Disc number. */
    DISC_NUMBER(9),
    /** Integer key: Episode number. */
    EPISODE_NUMBER(10),
    /** Integer key: Height. */
    HEIGHT(11),
    /** Double key: Location latitude. */
    LOCATION_LATITUDE(12),
    /** Double key: Location longitude. */
    LOCATION_LONGITUDE(13),
    /** String key: Location name. */
    LOCATION_NAME(14),
    /** Int key: Queue item ID. */
    QUEUE_ITEM_ID(15),
    /** String key: Release date. */
    RELEASE_DATE(16),
    /** Integer key: Season number. */
    SEASON_NUMBER(17),
    /** Time key in milliseconds: section duration. */
    SECTION_DURATION(18),
    /** Time key in milliseconds: section start absolute time. */
    SECTION_START_ABSOLUTE_TIME(19),
    /** Time key in milliseconds: section start time in the container. */
    SECTION_START_TIME_IN_CONTAINER(20),
    /** Time key in milliseconds: section start time in media item. */
    SECTION_START_TIME_IN_MEDIA(21),
    /** String key: Series title. */
    SERIES_TITLE(22),
    /** String key: Studio. */
    STUDIO(23),
    /** String key: Subtitle. */
    SUBTITLE(24),
    /** String key: Title. */
    TITLE(25),
    /** Integer key: Track number. */
    TRACK_NUMBER(26),
    /** Integer key: Width. */
    WIDTH(27);

    private final int index;

    private MediaMetadataKey(final int index) {
      this.index = index;
    }
  }

  /** Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaTrack */
  public enum TrackType {
    /** A media track type indicating an unknown track type. */
    UNKNOWN(0),
    /** A media track type indicating a text track. */
    TEXT(1),
    /** A media track type indicating an audio track. */
    AUDIO(2),
    /** A media track type indicating a video track. */
    VIDEO(3);

    private final int index;

    private TrackType(final int index) {
      this.index = index;
    }
  }

  /** Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaTrack */
  public enum TrackSubtype {
    /** A media track subtype indicating an unknown subtype. */
    UNKNOWN(0),
    /** A media track subtype indicating no subtype. */
    NONE(1),
    /** A media track subtype indicating subtitles. */
    SUBTITLES(2),
    /** A media track subtype indicating closed captions. */
    CAPTIONS(3),
    /** A media track subtype indicating descriptions. */
    DESCRIPTIONS(4),
    /** A media track subtype indicating chapters. */
    CHAPTERS(5),
    /** A media track subtype indicating metadata. */
    METADATA(6);

    private final int index;

    private TrackSubtype(final int index) {
      this.index = index;
    }
  }

  /** State of the remote media player */
  public enum PlayerState {
    /** Constant indicating unknown player state. */
    UNKNOWN(0),
    /** Constant indicating that the media player is idle. */
    IDLE(1),
    /** Constant indicating that the media player is playing. */
    PLAYING(2),
    /** Constant indicating that the media player is paused. */
    PAUSED(3),
    /** Constant indicating that the media player is buffering. */
    BUFFERING(4),
    /** Constant indicating that the media player is loading. */
    LOADING(5);

    private final int index;

    private PlayerState(final int index) {
      this.index = index;
    }
  }

  /**
   * Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaLoadRequestData
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class MediaLoadRequestData {
    private @Nullable Boolean shouldAutoplay;

    public @Nullable Boolean getShouldAutoplay() {
      return shouldAutoplay;
    }

    public void setShouldAutoplay(@Nullable Boolean setterArg) {
      this.shouldAutoplay = setterArg;
    }

    private @Nullable Long currentTime;

    public @Nullable Long getCurrentTime() {
      return currentTime;
    }

    public void setCurrentTime(@Nullable Long setterArg) {
      this.currentTime = setterArg;
    }

    private @Nullable MediaInfo mediaInfo;

    public @Nullable MediaInfo getMediaInfo() {
      return mediaInfo;
    }

    public void setMediaInfo(@Nullable MediaInfo setterArg) {
      this.mediaInfo = setterArg;
    }

    public static final class Builder {

      private @Nullable Boolean shouldAutoplay;

      public @NonNull Builder setShouldAutoplay(@Nullable Boolean setterArg) {
        this.shouldAutoplay = setterArg;
        return this;
      }

      private @Nullable Long currentTime;

      public @NonNull Builder setCurrentTime(@Nullable Long setterArg) {
        this.currentTime = setterArg;
        return this;
      }

      private @Nullable MediaInfo mediaInfo;

      public @NonNull Builder setMediaInfo(@Nullable MediaInfo setterArg) {
        this.mediaInfo = setterArg;
        return this;
      }

      public @NonNull MediaLoadRequestData build() {
        MediaLoadRequestData pigeonReturn = new MediaLoadRequestData();
        pigeonReturn.setShouldAutoplay(shouldAutoplay);
        pigeonReturn.setCurrentTime(currentTime);
        pigeonReturn.setMediaInfo(mediaInfo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(shouldAutoplay);
      toListResult.add(currentTime);
      toListResult.add((mediaInfo == null) ? null : mediaInfo.toList());
      return toListResult;
    }

    static @NonNull MediaLoadRequestData fromList(@NonNull ArrayList<Object> list) {
      MediaLoadRequestData pigeonResult = new MediaLoadRequestData();
      Object shouldAutoplay = list.get(0);
      pigeonResult.setShouldAutoplay((Boolean) shouldAutoplay);
      Object currentTime = list.get(1);
      pigeonResult.setCurrentTime((currentTime == null) ? null : ((currentTime instanceof Integer) ? (Integer) currentTime : (Long) currentTime));
      Object mediaInfo = list.get(2);
      pigeonResult.setMediaInfo((mediaInfo == null) ? null : MediaInfo.fromList((ArrayList<Object>) mediaInfo));
      return pigeonResult;
    }
  }

  /**
   * Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaInfo
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class MediaInfo {
    private @Nullable String contentId;

    public @Nullable String getContentId() {
      return contentId;
    }

    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable StreamType streamType;

    public @Nullable StreamType getStreamType() {
      return streamType;
    }

    public void setStreamType(@Nullable StreamType setterArg) {
      this.streamType = setterArg;
    }

    private @Nullable String contentType;

    public @Nullable String getContentType() {
      return contentType;
    }

    public void setContentType(@Nullable String setterArg) {
      this.contentType = setterArg;
    }

    private @Nullable MediaMetadata mediaMetadata;

    public @Nullable MediaMetadata getMediaMetadata() {
      return mediaMetadata;
    }

    public void setMediaMetadata(@Nullable MediaMetadata setterArg) {
      this.mediaMetadata = setterArg;
    }

    private @Nullable List<MediaTrack> mediaTracks;

    public @Nullable List<MediaTrack> getMediaTracks() {
      return mediaTracks;
    }

    public void setMediaTracks(@Nullable List<MediaTrack> setterArg) {
      this.mediaTracks = setterArg;
    }

    private @Nullable Long streamDuration;

    public @Nullable Long getStreamDuration() {
      return streamDuration;
    }

    public void setStreamDuration(@Nullable Long setterArg) {
      this.streamDuration = setterArg;
    }

    private @Nullable List<AdBreakClipInfo> adBreakClips;

    public @Nullable List<AdBreakClipInfo> getAdBreakClips() {
      return adBreakClips;
    }

    public void setAdBreakClips(@Nullable List<AdBreakClipInfo> setterArg) {
      this.adBreakClips = setterArg;
    }

    /** String containing a json object */
    private @Nullable String customDataAsJson;

    public @Nullable String getCustomDataAsJson() {
      return customDataAsJson;
    }

    public void setCustomDataAsJson(@Nullable String setterArg) {
      this.customDataAsJson = setterArg;
    }

    public static final class Builder {

      private @Nullable String contentId;

      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }

      private @Nullable StreamType streamType;

      public @NonNull Builder setStreamType(@Nullable StreamType setterArg) {
        this.streamType = setterArg;
        return this;
      }

      private @Nullable String contentType;

      public @NonNull Builder setContentType(@Nullable String setterArg) {
        this.contentType = setterArg;
        return this;
      }

      private @Nullable MediaMetadata mediaMetadata;

      public @NonNull Builder setMediaMetadata(@Nullable MediaMetadata setterArg) {
        this.mediaMetadata = setterArg;
        return this;
      }

      private @Nullable List<MediaTrack> mediaTracks;

      public @NonNull Builder setMediaTracks(@Nullable List<MediaTrack> setterArg) {
        this.mediaTracks = setterArg;
        return this;
      }

      private @Nullable Long streamDuration;

      public @NonNull Builder setStreamDuration(@Nullable Long setterArg) {
        this.streamDuration = setterArg;
        return this;
      }

      private @Nullable List<AdBreakClipInfo> adBreakClips;

      public @NonNull Builder setAdBreakClips(@Nullable List<AdBreakClipInfo> setterArg) {
        this.adBreakClips = setterArg;
        return this;
      }

      private @Nullable String customDataAsJson;

      public @NonNull Builder setCustomDataAsJson(@Nullable String setterArg) {
        this.customDataAsJson = setterArg;
        return this;
      }

      public @NonNull MediaInfo build() {
        MediaInfo pigeonReturn = new MediaInfo();
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setStreamType(streamType);
        pigeonReturn.setContentType(contentType);
        pigeonReturn.setMediaMetadata(mediaMetadata);
        pigeonReturn.setMediaTracks(mediaTracks);
        pigeonReturn.setStreamDuration(streamDuration);
        pigeonReturn.setAdBreakClips(adBreakClips);
        pigeonReturn.setCustomDataAsJson(customDataAsJson);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(contentId);
      toListResult.add(streamType == null ? null : streamType.index);
      toListResult.add(contentType);
      toListResult.add((mediaMetadata == null) ? null : mediaMetadata.toList());
      toListResult.add(mediaTracks);
      toListResult.add(streamDuration);
      toListResult.add(adBreakClips);
      toListResult.add(customDataAsJson);
      return toListResult;
    }

    static @NonNull MediaInfo fromList(@NonNull ArrayList<Object> list) {
      MediaInfo pigeonResult = new MediaInfo();
      Object contentId = list.get(0);
      pigeonResult.setContentId((String) contentId);
      Object streamType = list.get(1);
      pigeonResult.setStreamType(streamType == null ? null : StreamType.values()[(int) streamType]);
      Object contentType = list.get(2);
      pigeonResult.setContentType((String) contentType);
      Object mediaMetadata = list.get(3);
      pigeonResult.setMediaMetadata((mediaMetadata == null) ? null : MediaMetadata.fromList((ArrayList<Object>) mediaMetadata));
      Object mediaTracks = list.get(4);
      pigeonResult.setMediaTracks((List<MediaTrack>) mediaTracks);
      Object streamDuration = list.get(5);
      pigeonResult.setStreamDuration((streamDuration == null) ? null : ((streamDuration instanceof Integer) ? (Integer) streamDuration : (Long) streamDuration));
      Object adBreakClips = list.get(6);
      pigeonResult.setAdBreakClips((List<AdBreakClipInfo>) adBreakClips);
      Object customDataAsJson = list.get(7);
      pigeonResult.setCustomDataAsJson((String) customDataAsJson);
      return pigeonResult;
    }
  }

  /**
   * Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaMetadata
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class MediaMetadata {
    private @Nullable MediaType mediaType;

    public @Nullable MediaType getMediaType() {
      return mediaType;
    }

    public void setMediaType(@Nullable MediaType setterArg) {
      this.mediaType = setterArg;
    }

    private @Nullable Map<String, String> strings;

    public @Nullable Map<String, String> getStrings() {
      return strings;
    }

    public void setStrings(@Nullable Map<String, String> setterArg) {
      this.strings = setterArg;
    }

    private @Nullable List<WebImage> webImages;

    public @Nullable List<WebImage> getWebImages() {
      return webImages;
    }

    public void setWebImages(@Nullable List<WebImage> setterArg) {
      this.webImages = setterArg;
    }

    public static final class Builder {

      private @Nullable MediaType mediaType;

      public @NonNull Builder setMediaType(@Nullable MediaType setterArg) {
        this.mediaType = setterArg;
        return this;
      }

      private @Nullable Map<String, String> strings;

      public @NonNull Builder setStrings(@Nullable Map<String, String> setterArg) {
        this.strings = setterArg;
        return this;
      }

      private @Nullable List<WebImage> webImages;

      public @NonNull Builder setWebImages(@Nullable List<WebImage> setterArg) {
        this.webImages = setterArg;
        return this;
      }

      public @NonNull MediaMetadata build() {
        MediaMetadata pigeonReturn = new MediaMetadata();
        pigeonReturn.setMediaType(mediaType);
        pigeonReturn.setStrings(strings);
        pigeonReturn.setWebImages(webImages);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(mediaType == null ? null : mediaType.index);
      toListResult.add(strings);
      toListResult.add(webImages);
      return toListResult;
    }

    static @NonNull MediaMetadata fromList(@NonNull ArrayList<Object> list) {
      MediaMetadata pigeonResult = new MediaMetadata();
      Object mediaType = list.get(0);
      pigeonResult.setMediaType(mediaType == null ? null : MediaType.values()[(int) mediaType]);
      Object strings = list.get(1);
      pigeonResult.setStrings((Map<String, String>) strings);
      Object webImages = list.get(2);
      pigeonResult.setWebImages((List<WebImage>) webImages);
      return pigeonResult;
    }
  }

  /**
   * Docs here: https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class WebImage {
    private @Nullable String url;

    public @Nullable String getUrl() {
      return url;
    }

    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    public static final class Builder {

      private @Nullable String url;

      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }

      public @NonNull WebImage build() {
        WebImage pigeonReturn = new WebImage();
        pigeonReturn.setUrl(url);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(url);
      return toListResult;
    }

    static @NonNull WebImage fromList(@NonNull ArrayList<Object> list) {
      WebImage pigeonResult = new WebImage();
      Object url = list.get(0);
      pigeonResult.setUrl((String) url);
      return pigeonResult;
    }
  }

  /**
   * Docs here: https://developers.google.com/android/reference/com/google/android/gms/cast/MediaTrack
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class MediaTrack {
    private @Nullable Long id;

    public @Nullable Long getId() {
      return id;
    }

    public void setId(@Nullable Long setterArg) {
      this.id = setterArg;
    }

    private @Nullable TrackType trackType;

    public @Nullable TrackType getTrackType() {
      return trackType;
    }

    public void setTrackType(@Nullable TrackType setterArg) {
      this.trackType = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable TrackSubtype trackSubtype;

    public @Nullable TrackSubtype getTrackSubtype() {
      return trackSubtype;
    }

    public void setTrackSubtype(@Nullable TrackSubtype setterArg) {
      this.trackSubtype = setterArg;
    }

    private @Nullable String contentId;

    public @Nullable String getContentId() {
      return contentId;
    }

    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable String language;

    public @Nullable String getLanguage() {
      return language;
    }

    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    public static final class Builder {

      private @Nullable Long id;

      public @NonNull Builder setId(@Nullable Long setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable TrackType trackType;

      public @NonNull Builder setTrackType(@Nullable TrackType setterArg) {
        this.trackType = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable TrackSubtype trackSubtype;

      public @NonNull Builder setTrackSubtype(@Nullable TrackSubtype setterArg) {
        this.trackSubtype = setterArg;
        return this;
      }

      private @Nullable String contentId;

      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }

      private @Nullable String language;

      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }

      public @NonNull MediaTrack build() {
        MediaTrack pigeonReturn = new MediaTrack();
        pigeonReturn.setId(id);
        pigeonReturn.setTrackType(trackType);
        pigeonReturn.setName(name);
        pigeonReturn.setTrackSubtype(trackSubtype);
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setLanguage(language);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(id);
      toListResult.add(trackType == null ? null : trackType.index);
      toListResult.add(name);
      toListResult.add(trackSubtype == null ? null : trackSubtype.index);
      toListResult.add(contentId);
      toListResult.add(language);
      return toListResult;
    }

    static @NonNull MediaTrack fromList(@NonNull ArrayList<Object> list) {
      MediaTrack pigeonResult = new MediaTrack();
      Object id = list.get(0);
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer) id : (Long) id));
      Object trackType = list.get(1);
      pigeonResult.setTrackType(trackType == null ? null : TrackType.values()[(int) trackType]);
      Object name = list.get(2);
      pigeonResult.setName((String) name);
      Object trackSubtype = list.get(3);
      pigeonResult.setTrackSubtype(trackSubtype == null ? null : TrackSubtype.values()[(int) trackSubtype]);
      Object contentId = list.get(4);
      pigeonResult.setContentId((String) contentId);
      Object language = list.get(5);
      pigeonResult.setLanguage((String) language);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaStatus {
    private @Nullable PlayerState playerState;

    public @Nullable PlayerState getPlayerState() {
      return playerState;
    }

    public void setPlayerState(@Nullable PlayerState setterArg) {
      this.playerState = setterArg;
    }

    private @Nullable Boolean isPlayingAd;

    public @Nullable Boolean getIsPlayingAd() {
      return isPlayingAd;
    }

    public void setIsPlayingAd(@Nullable Boolean setterArg) {
      this.isPlayingAd = setterArg;
    }

    private @Nullable MediaInfo mediaInfo;

    public @Nullable MediaInfo getMediaInfo() {
      return mediaInfo;
    }

    public void setMediaInfo(@Nullable MediaInfo setterArg) {
      this.mediaInfo = setterArg;
    }

    private @Nullable AdBreakStatus adBreakStatus;

    public @Nullable AdBreakStatus getAdBreakStatus() {
      return adBreakStatus;
    }

    public void setAdBreakStatus(@Nullable AdBreakStatus setterArg) {
      this.adBreakStatus = setterArg;
    }

    public static final class Builder {

      private @Nullable PlayerState playerState;

      public @NonNull Builder setPlayerState(@Nullable PlayerState setterArg) {
        this.playerState = setterArg;
        return this;
      }

      private @Nullable Boolean isPlayingAd;

      public @NonNull Builder setIsPlayingAd(@Nullable Boolean setterArg) {
        this.isPlayingAd = setterArg;
        return this;
      }

      private @Nullable MediaInfo mediaInfo;

      public @NonNull Builder setMediaInfo(@Nullable MediaInfo setterArg) {
        this.mediaInfo = setterArg;
        return this;
      }

      private @Nullable AdBreakStatus adBreakStatus;

      public @NonNull Builder setAdBreakStatus(@Nullable AdBreakStatus setterArg) {
        this.adBreakStatus = setterArg;
        return this;
      }

      public @NonNull MediaStatus build() {
        MediaStatus pigeonReturn = new MediaStatus();
        pigeonReturn.setPlayerState(playerState);
        pigeonReturn.setIsPlayingAd(isPlayingAd);
        pigeonReturn.setMediaInfo(mediaInfo);
        pigeonReturn.setAdBreakStatus(adBreakStatus);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(playerState == null ? null : playerState.index);
      toListResult.add(isPlayingAd);
      toListResult.add((mediaInfo == null) ? null : mediaInfo.toList());
      toListResult.add((adBreakStatus == null) ? null : adBreakStatus.toList());
      return toListResult;
    }

    static @NonNull MediaStatus fromList(@NonNull ArrayList<Object> list) {
      MediaStatus pigeonResult = new MediaStatus();
      Object playerState = list.get(0);
      pigeonResult.setPlayerState(playerState == null ? null : PlayerState.values()[(int) playerState]);
      Object isPlayingAd = list.get(1);
      pigeonResult.setIsPlayingAd((Boolean) isPlayingAd);
      Object mediaInfo = list.get(2);
      pigeonResult.setMediaInfo((mediaInfo == null) ? null : MediaInfo.fromList((ArrayList<Object>) mediaInfo));
      Object adBreakStatus = list.get(3);
      pigeonResult.setAdBreakStatus((adBreakStatus == null) ? null : AdBreakStatus.fromList((ArrayList<Object>) adBreakStatus));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AdBreakStatus {
    private @Nullable String adBreakId;

    public @Nullable String getAdBreakId() {
      return adBreakId;
    }

    public void setAdBreakId(@Nullable String setterArg) {
      this.adBreakId = setterArg;
    }

    private @Nullable String adBreakClipId;

    public @Nullable String getAdBreakClipId() {
      return adBreakClipId;
    }

    public void setAdBreakClipId(@Nullable String setterArg) {
      this.adBreakClipId = setterArg;
    }

    private @Nullable Long whenSkippableMs;

    public @Nullable Long getWhenSkippableMs() {
      return whenSkippableMs;
    }

    public void setWhenSkippableMs(@Nullable Long setterArg) {
      this.whenSkippableMs = setterArg;
    }

    public static final class Builder {

      private @Nullable String adBreakId;

      public @NonNull Builder setAdBreakId(@Nullable String setterArg) {
        this.adBreakId = setterArg;
        return this;
      }

      private @Nullable String adBreakClipId;

      public @NonNull Builder setAdBreakClipId(@Nullable String setterArg) {
        this.adBreakClipId = setterArg;
        return this;
      }

      private @Nullable Long whenSkippableMs;

      public @NonNull Builder setWhenSkippableMs(@Nullable Long setterArg) {
        this.whenSkippableMs = setterArg;
        return this;
      }

      public @NonNull AdBreakStatus build() {
        AdBreakStatus pigeonReturn = new AdBreakStatus();
        pigeonReturn.setAdBreakId(adBreakId);
        pigeonReturn.setAdBreakClipId(adBreakClipId);
        pigeonReturn.setWhenSkippableMs(whenSkippableMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(adBreakId);
      toListResult.add(adBreakClipId);
      toListResult.add(whenSkippableMs);
      return toListResult;
    }

    static @NonNull AdBreakStatus fromList(@NonNull ArrayList<Object> list) {
      AdBreakStatus pigeonResult = new AdBreakStatus();
      Object adBreakId = list.get(0);
      pigeonResult.setAdBreakId((String) adBreakId);
      Object adBreakClipId = list.get(1);
      pigeonResult.setAdBreakClipId((String) adBreakClipId);
      Object whenSkippableMs = list.get(2);
      pigeonResult.setWhenSkippableMs((whenSkippableMs == null) ? null : ((whenSkippableMs instanceof Integer) ? (Integer) whenSkippableMs : (Long) whenSkippableMs));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AdBreakClipInfo {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String contentId;

    public @Nullable String getContentId() {
      return contentId;
    }

    public void setContentId(@Nullable String setterArg) {
      this.contentId = setterArg;
    }

    private @Nullable String contentUrl;

    public @Nullable String getContentUrl() {
      return contentUrl;
    }

    public void setContentUrl(@Nullable String setterArg) {
      this.contentUrl = setterArg;
    }

    private @Nullable String clickThroughUrl;

    public @Nullable String getClickThroughUrl() {
      return clickThroughUrl;
    }

    public void setClickThroughUrl(@Nullable String setterArg) {
      this.clickThroughUrl = setterArg;
    }

    private @Nullable Long durationMs;

    public @Nullable Long getDurationMs() {
      return durationMs;
    }

    public void setDurationMs(@Nullable Long setterArg) {
      this.durationMs = setterArg;
    }

    private @Nullable String imageUrl;

    public @Nullable String getImageUrl() {
      return imageUrl;
    }

    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String mimeType;

    public @Nullable String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable Long whenSkippableMs;

    public @Nullable Long getWhenSkippableMs() {
      return whenSkippableMs;
    }

    public void setWhenSkippableMs(@Nullable Long setterArg) {
      this.whenSkippableMs = setterArg;
    }

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String contentId;

      public @NonNull Builder setContentId(@Nullable String setterArg) {
        this.contentId = setterArg;
        return this;
      }

      private @Nullable String contentUrl;

      public @NonNull Builder setContentUrl(@Nullable String setterArg) {
        this.contentUrl = setterArg;
        return this;
      }

      private @Nullable String clickThroughUrl;

      public @NonNull Builder setClickThroughUrl(@Nullable String setterArg) {
        this.clickThroughUrl = setterArg;
        return this;
      }

      private @Nullable Long durationMs;

      public @NonNull Builder setDurationMs(@Nullable Long setterArg) {
        this.durationMs = setterArg;
        return this;
      }

      private @Nullable String imageUrl;

      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable Long whenSkippableMs;

      public @NonNull Builder setWhenSkippableMs(@Nullable Long setterArg) {
        this.whenSkippableMs = setterArg;
        return this;
      }

      public @NonNull AdBreakClipInfo build() {
        AdBreakClipInfo pigeonReturn = new AdBreakClipInfo();
        pigeonReturn.setId(id);
        pigeonReturn.setTitle(title);
        pigeonReturn.setContentId(contentId);
        pigeonReturn.setContentUrl(contentUrl);
        pigeonReturn.setClickThroughUrl(clickThroughUrl);
        pigeonReturn.setDurationMs(durationMs);
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setWhenSkippableMs(whenSkippableMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(id);
      toListResult.add(title);
      toListResult.add(contentId);
      toListResult.add(contentUrl);
      toListResult.add(clickThroughUrl);
      toListResult.add(durationMs);
      toListResult.add(imageUrl);
      toListResult.add(mimeType);
      toListResult.add(whenSkippableMs);
      return toListResult;
    }

    static @NonNull AdBreakClipInfo fromList(@NonNull ArrayList<Object> list) {
      AdBreakClipInfo pigeonResult = new AdBreakClipInfo();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object title = list.get(1);
      pigeonResult.setTitle((String) title);
      Object contentId = list.get(2);
      pigeonResult.setContentId((String) contentId);
      Object contentUrl = list.get(3);
      pigeonResult.setContentUrl((String) contentUrl);
      Object clickThroughUrl = list.get(4);
      pigeonResult.setClickThroughUrl((String) clickThroughUrl);
      Object durationMs = list.get(5);
      pigeonResult.setDurationMs((durationMs == null) ? null : ((durationMs instanceof Integer) ? (Integer) durationMs : (Long) durationMs));
      Object imageUrl = list.get(6);
      pigeonResult.setImageUrl((String) imageUrl);
      Object mimeType = list.get(7);
      pigeonResult.setMimeType((String) mimeType);
      Object whenSkippableMs = list.get(8);
      pigeonResult.setWhenSkippableMs((whenSkippableMs == null) ? null : ((whenSkippableMs instanceof Integer) ? (Integer) whenSkippableMs : (Long) whenSkippableMs));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaQueueItem {
    private @Nullable Long itemId;

    public @Nullable Long getItemId() {
      return itemId;
    }

    public void setItemId(@Nullable Long setterArg) {
      this.itemId = setterArg;
    }

    private @Nullable Double playbackDuration;

    public @Nullable Double getPlaybackDuration() {
      return playbackDuration;
    }

    public void setPlaybackDuration(@Nullable Double setterArg) {
      this.playbackDuration = setterArg;
    }

    private @Nullable Double startTime;

    public @Nullable Double getStartTime() {
      return startTime;
    }

    public void setStartTime(@Nullable Double setterArg) {
      this.startTime = setterArg;
    }

    private @Nullable MediaInfo media;

    public @Nullable MediaInfo getMedia() {
      return media;
    }

    public void setMedia(@Nullable MediaInfo setterArg) {
      this.media = setterArg;
    }

    private @Nullable Boolean autoplay;

    public @Nullable Boolean getAutoplay() {
      return autoplay;
    }

    public void setAutoplay(@Nullable Boolean setterArg) {
      this.autoplay = setterArg;
    }

    private @Nullable Double preloadTime;

    public @Nullable Double getPreloadTime() {
      return preloadTime;
    }

    public void setPreloadTime(@Nullable Double setterArg) {
      this.preloadTime = setterArg;
    }

    public static final class Builder {

      private @Nullable Long itemId;

      public @NonNull Builder setItemId(@Nullable Long setterArg) {
        this.itemId = setterArg;
        return this;
      }

      private @Nullable Double playbackDuration;

      public @NonNull Builder setPlaybackDuration(@Nullable Double setterArg) {
        this.playbackDuration = setterArg;
        return this;
      }

      private @Nullable Double startTime;

      public @NonNull Builder setStartTime(@Nullable Double setterArg) {
        this.startTime = setterArg;
        return this;
      }

      private @Nullable MediaInfo media;

      public @NonNull Builder setMedia(@Nullable MediaInfo setterArg) {
        this.media = setterArg;
        return this;
      }

      private @Nullable Boolean autoplay;

      public @NonNull Builder setAutoplay(@Nullable Boolean setterArg) {
        this.autoplay = setterArg;
        return this;
      }

      private @Nullable Double preloadTime;

      public @NonNull Builder setPreloadTime(@Nullable Double setterArg) {
        this.preloadTime = setterArg;
        return this;
      }

      public @NonNull MediaQueueItem build() {
        MediaQueueItem pigeonReturn = new MediaQueueItem();
        pigeonReturn.setItemId(itemId);
        pigeonReturn.setPlaybackDuration(playbackDuration);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setMedia(media);
        pigeonReturn.setAutoplay(autoplay);
        pigeonReturn.setPreloadTime(preloadTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(itemId);
      toListResult.add(playbackDuration);
      toListResult.add(startTime);
      toListResult.add((media == null) ? null : media.toList());
      toListResult.add(autoplay);
      toListResult.add(preloadTime);
      return toListResult;
    }

    static @NonNull MediaQueueItem fromList(@NonNull ArrayList<Object> list) {
      MediaQueueItem pigeonResult = new MediaQueueItem();
      Object itemId = list.get(0);
      pigeonResult.setItemId((itemId == null) ? null : ((itemId instanceof Integer) ? (Integer) itemId : (Long) itemId));
      Object playbackDuration = list.get(1);
      pigeonResult.setPlaybackDuration((Double) playbackDuration);
      Object startTime = list.get(2);
      pigeonResult.setStartTime((Double) startTime);
      Object media = list.get(3);
      pigeonResult.setMedia((media == null) ? null : MediaInfo.fromList((ArrayList<Object>) media));
      Object autoplay = list.get(4);
      pigeonResult.setAutoplay((Boolean) autoplay);
      Object preloadTime = list.get(5);
      pigeonResult.setPreloadTime((Double) preloadTime);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CastDevice {
    private @Nullable String deviceId;

    public @Nullable String getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@Nullable String setterArg) {
      this.deviceId = setterArg;
    }

    private @Nullable String friendlyName;

    public @Nullable String getFriendlyName() {
      return friendlyName;
    }

    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable String modelName;

    public @Nullable String getModelName() {
      return modelName;
    }

    public void setModelName(@Nullable String setterArg) {
      this.modelName = setterArg;
    }

    public static final class Builder {

      private @Nullable String deviceId;

      public @NonNull Builder setDeviceId(@Nullable String setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String friendlyName;

      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }

      private @Nullable String modelName;

      public @NonNull Builder setModelName(@Nullable String setterArg) {
        this.modelName = setterArg;
        return this;
      }

      public @NonNull CastDevice build() {
        CastDevice pigeonReturn = new CastDevice();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setModelName(modelName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(deviceId);
      toListResult.add(friendlyName);
      toListResult.add(modelName);
      return toListResult;
    }

    static @NonNull CastDevice fromList(@NonNull ArrayList<Object> list) {
      CastDevice pigeonResult = new CastDevice();
      Object deviceId = list.get(0);
      pigeonResult.setDeviceId((String) deviceId);
      Object friendlyName = list.get(1);
      pigeonResult.setFriendlyName((String) friendlyName);
      Object modelName = list.get(2);
      pigeonResult.setModelName((String) modelName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CastMessage {
    private @Nullable String namespace;

    public @Nullable String getNamespace() {
      return namespace;
    }

    public void setNamespace(@Nullable String setterArg) {
      this.namespace = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    public static final class Builder {

      private @Nullable String namespace;

      public @NonNull Builder setNamespace(@Nullable String setterArg) {
        this.namespace = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      public @NonNull CastMessage build() {
        CastMessage pigeonReturn = new CastMessage();
        pigeonReturn.setNamespace(namespace);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(namespace);
      toListResult.add(message);
      return toListResult;
    }

    static @NonNull CastMessage fromList(@NonNull ArrayList<Object> list) {
      CastMessage pigeonResult = new CastMessage();
      Object namespace = list.get(0);
      pigeonResult.setNamespace((String) namespace);
      Object message = list.get(1);
      pigeonResult.setMessage((String) message);
      return pigeonResult;
    }
  }

  private static class CastHostApiCodec extends StandardMessageCodec {
    public static final CastHostApiCodec INSTANCE = new CastHostApiCodec();

    private CastHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AdBreakClipInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return CastDevice.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CastMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MediaInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return MediaLoadRequestData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return MediaMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return MediaQueueItem.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return MediaTrack.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return WebImage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AdBreakClipInfo) {
        stream.write(128);
        writeValue(stream, ((AdBreakClipInfo) value).toList());
      } else if (value instanceof CastDevice) {
        stream.write(129);
        writeValue(stream, ((CastDevice) value).toList());
      } else if (value instanceof CastMessage) {
        stream.write(130);
        writeValue(stream, ((CastMessage) value).toList());
      } else if (value instanceof MediaInfo) {
        stream.write(131);
        writeValue(stream, ((MediaInfo) value).toList());
      } else if (value instanceof MediaLoadRequestData) {
        stream.write(132);
        writeValue(stream, ((MediaLoadRequestData) value).toList());
      } else if (value instanceof MediaMetadata) {
        stream.write(133);
        writeValue(stream, ((MediaMetadata) value).toList());
      } else if (value instanceof MediaQueueItem) {
        stream.write(134);
        writeValue(stream, ((MediaQueueItem) value).toList());
      } else if (value instanceof MediaTrack) {
        stream.write(135);
        writeValue(stream, ((MediaTrack) value).toList());
      } else if (value instanceof WebImage) {
        stream.write(136);
        writeValue(stream, ((WebImage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * APIs for Flutter-to-Host comunication
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface CastHostApi {

    void sendMessage(@NonNull CastMessage message);

    void showCastDialog();

    void setMute(@NonNull Boolean muted);

    @NonNull 
    CastDevice getCastDevice();

    void loadMediaLoadRequestData(@NonNull MediaLoadRequestData request);

    @NonNull 
    MediaInfo getMediaInfo();

    void play();

    void pause();

    void stop();

    void showTracksChooserDialog();

    void skipAd();

    void queueAppendItem(@NonNull MediaQueueItem item);

    void queueNextItem();

    void queuePrevItem();

    @NonNull 
    Long getQueueItemCount();

    @NonNull 
    MediaQueueItem getQueueItemAtIndex(@NonNull Long index);

    /** The codec used by CastHostApi. */
    static MessageCodec<Object> getCodec() {
      return CastHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `CastHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CastHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  CastMessage messageArg = (CastMessage) args.get(0);
                  if (messageArg == null) {
                    throw new NullPointerException("messageArg unexpectedly null.");
                  }
                  api.sendMessage(messageArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.showCastDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.showCastDialog();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.setMute", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean mutedArg = (Boolean) args.get(0);
                  if (mutedArg == null) {
                    throw new NullPointerException("mutedArg unexpectedly null.");
                  }
                  api.setMute(mutedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.getCastDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  CastDevice output = api.getCastDevice();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.loadMediaLoadRequestData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  MediaLoadRequestData requestArg = (MediaLoadRequestData) args.get(0);
                  if (requestArg == null) {
                    throw new NullPointerException("requestArg unexpectedly null.");
                  }
                  api.loadMediaLoadRequestData(requestArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.getMediaInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  MediaInfo output = api.getMediaInfo();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.play();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.pause();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.stop();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.showTracksChooserDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.showTracksChooserDialog();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.skipAd", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.skipAd();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.queueAppendItem", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  MediaQueueItem itemArg = (MediaQueueItem) args.get(0);
                  if (itemArg == null) {
                    throw new NullPointerException("itemArg unexpectedly null.");
                  }
                  api.queueAppendItem(itemArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.queueNextItem", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.queueNextItem();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.queuePrevItem", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.queuePrevItem();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.getQueueItemCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getQueueItemCount();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.CastHostApi.getQueueItemAtIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number indexArg = (Number) args.get(0);
                  if (indexArg == null) {
                    throw new NullPointerException("indexArg unexpectedly null.");
                  }
                  MediaQueueItem output = api.getQueueItemAtIndex((indexArg == null) ? null : indexArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class CastFlutterApiCodec extends StandardMessageCodec {
    public static final CastFlutterApiCodec INSTANCE = new CastFlutterApiCodec();

    private CastFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AdBreakClipInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AdBreakStatus.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CastMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MediaInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return MediaMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return MediaStatus.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return MediaTrack.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return WebImage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AdBreakClipInfo) {
        stream.write(128);
        writeValue(stream, ((AdBreakClipInfo) value).toList());
      } else if (value instanceof AdBreakStatus) {
        stream.write(129);
        writeValue(stream, ((AdBreakStatus) value).toList());
      } else if (value instanceof CastMessage) {
        stream.write(130);
        writeValue(stream, ((CastMessage) value).toList());
      } else if (value instanceof MediaInfo) {
        stream.write(131);
        writeValue(stream, ((MediaInfo) value).toList());
      } else if (value instanceof MediaMetadata) {
        stream.write(132);
        writeValue(stream, ((MediaMetadata) value).toList());
      } else if (value instanceof MediaStatus) {
        stream.write(133);
        writeValue(stream, ((MediaStatus) value).toList());
      } else if (value instanceof MediaTrack) {
        stream.write(134);
        writeValue(stream, ((MediaTrack) value).toList());
      } else if (value instanceof WebImage) {
        stream.write(135);
        writeValue(stream, ((WebImage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * APIs for Host-to-Flutter comunication
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class CastFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public CastFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by CastFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return CastFlutterApiCodec.INSTANCE;
    }
    public void getSessionMessageNamespaces(Reply<List<String>> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.getSessionMessageNamespaces", getCodec());
      channel.send(
          null,
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            List<String> output = (List<String>) channelReply;
            callback.reply(output);
          });
    }
    public void onCastStateChanged(@NonNull Long castStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onCastStateChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(castStateArg)),
          channelReply -> callback.reply(null));
    }
    public void onMessageReceived(@NonNull CastMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMessageReceived", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> callback.reply(null));
    }
    public void onSessionStarting(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarting", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStarted", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionStartFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionStartFailed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionEnding(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnding", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionEnded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionEnded", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResuming(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResuming", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResumed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResumeFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionResumeFailed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionSuspended(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSessionSuspended", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onStatusUpdated(@NonNull MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onStatusUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(mediaStatusArg)),
          channelReply -> callback.reply(null));
    }
    public void onMetadataUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMetadataUpdated", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onQueueStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onQueueStatusUpdated", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onPreloadStatusUpdated(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onPreloadStatusUpdated", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSendingRemoteMediaRequest(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onSendingRemoteMediaRequest", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onAdBreakStatusUpdated(@NonNull MediaStatus mediaStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakStatusUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(mediaStatusArg)),
          channelReply -> callback.reply(null));
    }
    public void onMediaError(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onMediaError", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onProgressUpdated(@NonNull Long progressMsArg, @NonNull Long durationMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onProgressUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(progressMsArg, durationMsArg)),
          channelReply -> callback.reply(null));
    }
    public void onAdBreakClipProgressUpdated(@NonNull String adBreakIdArg, @NonNull String adBreakClipIdArg, @NonNull Long progressMsArg, @NonNull Long durationMsArg, @NonNull Long whenSkippableMsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.onAdBreakClipProgressUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(adBreakIdArg, adBreakClipIdArg, progressMsArg, durationMsArg, whenSkippableMsArg)),
          channelReply -> callback.reply(null));
    }
    public void itemsInsertedInRange(@NonNull Long insertIndexArg, @NonNull Long insertCountArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsInsertedInRange", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(insertIndexArg, insertCountArg)),
          channelReply -> callback.reply(null));
    }
    public void itemsReloaded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsReloaded", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void itemsRemovedAtIndexes(@NonNull List<Long> indexesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsRemovedAtIndexes", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(indexesArg)),
          channelReply -> callback.reply(null));
    }
    public void itemsReorderedAtIndexes(@NonNull List<Long> indexesArg, @NonNull Long insertBeforeIndexArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsReorderedAtIndexes", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(indexesArg, insertBeforeIndexArg)),
          channelReply -> callback.reply(null));
    }
    public void itemsUpdatedAtIndexes(@NonNull List<Long> indexesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.itemsUpdatedAtIndexes", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(indexesArg)),
          channelReply -> callback.reply(null));
    }
    public void mediaQueueChanged(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.mediaQueueChanged", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void mediaQueueWillChange(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.CastFlutterApi.mediaQueueWillChange", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
  }
}
